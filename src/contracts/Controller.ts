/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface ControllerInterface extends utils.Interface {
  contractName: 'Controller';
  functions: {
    'approveStrategy(address,address)': FunctionFragment;
    'approvedStrategies(address,address)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'converters(address,address)': FunctionFragment;
    'earn(address,uint256)': FunctionFragment;
    'getExpectedReturn(address,address,uint256)': FunctionFragment;
    'governance()': FunctionFragment;
    'inCaseStrategyTokenGetStuck(address,address)': FunctionFragment;
    'inCaseTokensGetStuck(address,uint256)': FunctionFragment;
    'initialize(address,address,address,address)': FunctionFragment;
    'keeper()': FunctionFragment;
    'max()': FunctionFragment;
    'onesplit()': FunctionFragment;
    'revokeStrategy(address,address)': FunctionFragment;
    'rewards()': FunctionFragment;
    'setConverter(address,address,address)': FunctionFragment;
    'setGovernance(address)': FunctionFragment;
    'setKeeper(address)': FunctionFragment;
    'setOneSplit(address)': FunctionFragment;
    'setRewards(address)': FunctionFragment;
    'setSplit(uint256)': FunctionFragment;
    'setStrategist(address)': FunctionFragment;
    'setStrategy(address,address)': FunctionFragment;
    'setVault(address,address)': FunctionFragment;
    'split()': FunctionFragment;
    'strategies(address)': FunctionFragment;
    'strategist()': FunctionFragment;
    'vaults(address)': FunctionFragment;
    'withdraw(address,uint256)': FunctionFragment;
    'withdrawAll(address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'approveStrategy',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'approvedStrategies',
    values: [string, string],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'converters',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'earn',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getExpectedReturn',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'governance',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'inCaseStrategyTokenGetStuck',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'inCaseTokensGetStuck',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, string],
  ): string;
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'max', values?: undefined): string;
  encodeFunctionData(functionFragment: 'onesplit', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'revokeStrategy',
    values: [string, string],
  ): string;
  encodeFunctionData(functionFragment: 'rewards', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setConverter',
    values: [string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setGovernance',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'setKeeper', values: [string]): string;
  encodeFunctionData(functionFragment: 'setOneSplit', values: [string]): string;
  encodeFunctionData(functionFragment: 'setRewards', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setSplit',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setStrategist',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setStrategy',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setVault',
    values: [string, string],
  ): string;
  encodeFunctionData(functionFragment: 'split', values?: undefined): string;
  encodeFunctionData(functionFragment: 'strategies', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'strategist',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'vaults', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values: [string]): string;

  decodeFunctionResult(
    functionFragment: 'approveStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'approvedStrategies',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'converters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earn', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getExpectedReturn',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'inCaseStrategyTokenGetStuck',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'inCaseTokensGetStuck',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'max', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onesplit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'revokeStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setConverter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setGovernance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setKeeper', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setOneSplit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSplit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setStrategist',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'split', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawAll',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface Controller extends BaseContract {
  contractName: 'Controller';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveStrategy(
      _token: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approvedStrategies(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    balanceOf(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    converters(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    earn(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getExpectedReturn(
      _strategy: string,
      _token: string,
      parts: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { expected: BigNumber }>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    inCaseStrategyTokenGetStuck(
      _strategy: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _governance: string,
      _strategist: string,
      _keeper: string,
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    max(overrides?: CallOverrides): Promise<[BigNumber]>;

    onesplit(overrides?: CallOverrides): Promise<[string]>;

    revokeStrategy(
      _token: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    setConverter(
      _input: string,
      _output: string,
      _converter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOneSplit(
      _onesplit: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setSplit(
      _split: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStrategy(
      _token: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setVault(
      _token: string,
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    split(overrides?: CallOverrides): Promise<[BigNumber]>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawAll(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  approveStrategy(
    _token: string,
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approvedStrategies(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  balanceOf(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  converters(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  earn(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getExpectedReturn(
    _strategy: string,
    _token: string,
    parts: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  inCaseStrategyTokenGetStuck(
    _strategy: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  inCaseTokensGetStuck(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _governance: string,
    _strategist: string,
    _keeper: string,
    _rewards: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  keeper(overrides?: CallOverrides): Promise<string>;

  max(overrides?: CallOverrides): Promise<BigNumber>;

  onesplit(overrides?: CallOverrides): Promise<string>;

  revokeStrategy(
    _token: string,
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rewards(overrides?: CallOverrides): Promise<string>;

  setConverter(
    _input: string,
    _output: string,
    _converter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOneSplit(
    _onesplit: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRewards(
    _rewards: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setSplit(
    _split: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStrategy(
    _token: string,
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setVault(
    _token: string,
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  split(overrides?: CallOverrides): Promise<BigNumber>;

  strategies(arg0: string, overrides?: CallOverrides): Promise<string>;

  strategist(overrides?: CallOverrides): Promise<string>;

  vaults(arg0: string, overrides?: CallOverrides): Promise<string>;

  withdraw(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawAll(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    approveStrategy(
      _token: string,
      _strategy: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    approvedStrategies(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    converters(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    earn(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    getExpectedReturn(
      _strategy: string,
      _token: string,
      parts: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    inCaseStrategyTokenGetStuck(
      _strategy: string,
      _token: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    initialize(
      _governance: string,
      _strategist: string,
      _keeper: string,
      _rewards: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    keeper(overrides?: CallOverrides): Promise<string>;

    max(overrides?: CallOverrides): Promise<BigNumber>;

    onesplit(overrides?: CallOverrides): Promise<string>;

    revokeStrategy(
      _token: string,
      _strategy: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    rewards(overrides?: CallOverrides): Promise<string>;

    setConverter(
      _input: string,
      _output: string,
      _converter: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setKeeper(_keeper: string, overrides?: CallOverrides): Promise<void>;

    setOneSplit(_onesplit: string, overrides?: CallOverrides): Promise<void>;

    setRewards(_rewards: string, overrides?: CallOverrides): Promise<void>;

    setSplit(_split: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setStrategist(
      _strategist: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setStrategy(
      _token: string,
      _strategy: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setVault(
      _token: string,
      _vault: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    split(overrides?: CallOverrides): Promise<BigNumber>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<string>;

    strategist(overrides?: CallOverrides): Promise<string>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<string>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawAll(_token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    approveStrategy(
      _token: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approvedStrategies(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOf(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    converters(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    earn(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getExpectedReturn(
      _strategy: string,
      _token: string,
      parts: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    inCaseStrategyTokenGetStuck(
      _strategy: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _governance: string,
      _strategist: string,
      _keeper: string,
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    max(overrides?: CallOverrides): Promise<BigNumber>;

    onesplit(overrides?: CallOverrides): Promise<BigNumber>;

    revokeStrategy(
      _token: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    setConverter(
      _input: string,
      _output: string,
      _converter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOneSplit(
      _onesplit: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setSplit(
      _split: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setStrategy(
      _token: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setVault(
      _token: string,
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    split(overrides?: CallOverrides): Promise<BigNumber>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawAll(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveStrategy(
      _token: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approvedStrategies(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _token: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    converters(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    earn(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getExpectedReturn(
      _strategy: string,
      _token: string,
      parts: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inCaseStrategyTokenGetStuck(
      _strategy: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    inCaseTokensGetStuck(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _governance: string,
      _strategist: string,
      _keeper: string,
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    max(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onesplit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeStrategy(
      _token: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setConverter(
      _input: string,
      _output: string,
      _converter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOneSplit(
      _onesplit: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setSplit(
      _split: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStrategy(
      _token: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setVault(
      _token: string,
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    split(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategies(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaults(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
