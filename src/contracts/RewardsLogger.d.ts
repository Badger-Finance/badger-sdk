/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface RewardsLoggerInterface extends ethers.utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'MANAGER_ROLE()': FunctionFragment;
    'getAllUnlockSchedulesFor(address)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getRoleMember(bytes32,uint256)': FunctionFragment;
    'getRoleMemberCount(bytes32)': FunctionFragment;
    'getUnlockSchedulesFor(address,address)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initialize(address,address)': FunctionFragment;
    'modifyUnlockSchedule(uint256,address,address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setDiggPegRewards(address,uint256,uint256)': FunctionFragment;
    'setUnlockSchedule(address,address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'unlockSchedules(address,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MANAGER_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getAllUnlockSchedulesFor',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRoleMemberCount',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUnlockSchedulesFor',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'modifyUnlockSchedule',
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDiggPegRewards',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setUnlockSchedule',
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'unlockSchedules',
    values: [string, BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MANAGER_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAllUnlockSchedulesFor',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleMember',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleMemberCount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUnlockSchedulesFor',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'modifyUnlockSchedule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setDiggPegRewards',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setUnlockSchedule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unlockSchedules',
    data: BytesLike,
  ): Result;

  events: {
    'DiggPegRewards(address,uint256,uint256,uint256,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'UnlockScheduleModified(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'UnlockScheduleSet(address,address,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DiggPegRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnlockScheduleModified'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnlockScheduleSet'): EventFragment;
}

export type DiggPegRewardsEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    beneficiary: string;
    response: BigNumber;
    rate: BigNumber;
    timestamp: BigNumber;
    blockNumber: BigNumber;
  }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type UnlockScheduleModifiedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    index: BigNumber;
    beneficiary: string;
    token: string;
    totalAmount: BigNumber;
    start: BigNumber;
    end: BigNumber;
    duration: BigNumber;
    timestamp: BigNumber;
    blockNumber: BigNumber;
  }
>;

export type UnlockScheduleSetEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    beneficiary: string;
    token: string;
    totalAmount: BigNumber;
    start: BigNumber;
    end: BigNumber;
    duration: BigNumber;
    timestamp: BigNumber;
    blockNumber: BigNumber;
  }
>;

export class RewardsLogger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardsLoggerInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getAllUnlockSchedulesFor(
      beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        ([string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          beneficiary: string;
          token: string;
          totalAmount: BigNumber;
          start: BigNumber;
          end: BigNumber;
          duration: BigNumber;
        })[],
      ]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUnlockSchedulesFor(
      beneficiary: string,
      token: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        ([string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          beneficiary: string;
          token: string;
          totalAmount: BigNumber;
          start: BigNumber;
          end: BigNumber;
          duration: BigNumber;
        })[],
      ]
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    initialize(
      initialAdmin_: string,
      initialManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    modifyUnlockSchedule(
      index: BigNumberish,
      beneficiary: string,
      token: string,
      totalAmount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDiggPegRewards(
      beneficiary: string,
      response: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUnlockSchedule(
      beneficiary: string,
      token: string,
      totalAmount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unlockSchedules(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        beneficiary: string;
        token: string;
        totalAmount: BigNumber;
        start: BigNumber;
        end: BigNumber;
        duration: BigNumber;
      }
    >;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  getAllUnlockSchedulesFor(
    beneficiary: string,
    overrides?: CallOverrides,
  ): Promise<
    ([string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      beneficiary: string;
      token: string;
      totalAmount: BigNumber;
      start: BigNumber;
      end: BigNumber;
      duration: BigNumber;
    })[]
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUnlockSchedulesFor(
    beneficiary: string,
    token: string,
    overrides?: CallOverrides,
  ): Promise<
    ([string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      beneficiary: string;
      token: string;
      totalAmount: BigNumber;
      start: BigNumber;
      end: BigNumber;
      duration: BigNumber;
    })[]
  >;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  initialize(
    initialAdmin_: string,
    initialManager_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  modifyUnlockSchedule(
    index: BigNumberish,
    beneficiary: string,
    token: string,
    totalAmount: BigNumberish,
    start: BigNumberish,
    end: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDiggPegRewards(
    beneficiary: string,
    response: BigNumberish,
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUnlockSchedule(
    beneficiary: string,
    token: string,
    totalAmount: BigNumberish,
    start: BigNumberish,
    end: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unlockSchedules(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      beneficiary: string;
      token: string;
      totalAmount: BigNumber;
      start: BigNumber;
      end: BigNumber;
      duration: BigNumber;
    }
  >;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    getAllUnlockSchedulesFor(
      beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<
      ([string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        beneficiary: string;
        token: string;
        totalAmount: BigNumber;
        start: BigNumber;
        end: BigNumber;
        duration: BigNumber;
      })[]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUnlockSchedulesFor(
      beneficiary: string,
      token: string,
      overrides?: CallOverrides,
    ): Promise<
      ([string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        beneficiary: string;
        token: string;
        totalAmount: BigNumber;
        start: BigNumber;
        end: BigNumber;
        duration: BigNumber;
      })[]
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      initialAdmin_: string,
      initialManager_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    modifyUnlockSchedule(
      index: BigNumberish,
      beneficiary: string,
      token: string,
      totalAmount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDiggPegRewards(
      beneficiary: string,
      response: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUnlockSchedule(
      beneficiary: string,
      token: string,
      totalAmount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    unlockSchedules(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        beneficiary: string;
        token: string;
        totalAmount: BigNumber;
        start: BigNumber;
        end: BigNumber;
        duration: BigNumber;
      }
    >;
  };

  filters: {
    'DiggPegRewards(address,uint256,uint256,uint256,uint256)'(
      beneficiary?: string | null,
      response?: null,
      rate?: null,
      timestamp?: BigNumberish | null,
      blockNumber?: BigNumberish | null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        beneficiary: string;
        response: BigNumber;
        rate: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    DiggPegRewards(
      beneficiary?: string | null,
      response?: null,
      rate?: null,
      timestamp?: BigNumberish | null,
      blockNumber?: BigNumberish | null,
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        beneficiary: string;
        response: BigNumber;
        rate: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    'UnlockScheduleModified(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256)'(
      index?: null,
      beneficiary?: string | null,
      token?: null,
      totalAmount?: null,
      start?: null,
      end?: null,
      duration?: null,
      timestamp?: BigNumberish | null,
      blockNumber?: BigNumberish | null,
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ],
      {
        index: BigNumber;
        beneficiary: string;
        token: string;
        totalAmount: BigNumber;
        start: BigNumber;
        end: BigNumber;
        duration: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    UnlockScheduleModified(
      index?: null,
      beneficiary?: string | null,
      token?: null,
      totalAmount?: null,
      start?: null,
      end?: null,
      duration?: null,
      timestamp?: BigNumberish | null,
      blockNumber?: BigNumberish | null,
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ],
      {
        index: BigNumber;
        beneficiary: string;
        token: string;
        totalAmount: BigNumber;
        start: BigNumber;
        end: BigNumber;
        duration: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    'UnlockScheduleSet(address,address,uint256,uint256,uint256,uint256,uint256,uint256)'(
      beneficiary?: string | null,
      token?: null,
      totalAmount?: null,
      start?: null,
      end?: null,
      duration?: null,
      timestamp?: BigNumberish | null,
      blockNumber?: BigNumberish | null,
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ],
      {
        beneficiary: string;
        token: string;
        totalAmount: BigNumber;
        start: BigNumber;
        end: BigNumber;
        duration: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    UnlockScheduleSet(
      beneficiary?: string | null,
      token?: null,
      totalAmount?: null,
      start?: null,
      end?: null,
      duration?: null,
      timestamp?: BigNumberish | null,
      blockNumber?: BigNumberish | null,
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ],
      {
        beneficiary: string;
        token: string;
        totalAmount: BigNumber;
        start: BigNumber;
        end: BigNumber;
        duration: BigNumber;
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getAllUnlockSchedulesFor(
      beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUnlockSchedulesFor(
      beneficiary: string,
      token: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      initialAdmin_: string,
      initialManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    modifyUnlockSchedule(
      index: BigNumberish,
      beneficiary: string,
      token: string,
      totalAmount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDiggPegRewards(
      beneficiary: string,
      response: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setUnlockSchedule(
      beneficiary: string,
      token: string,
      totalAmount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unlockSchedules(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllUnlockSchedulesFor(
      beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUnlockSchedulesFor(
      beneficiary: string,
      token: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      initialAdmin_: string,
      initialManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    modifyUnlockSchedule(
      index: BigNumberish,
      beneficiary: string,
      token: string,
      totalAmount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDiggPegRewards(
      beneficiary: string,
      response: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUnlockSchedule(
      beneficiary: string,
      token: string,
      totalAmount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unlockSchedules(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
