/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface CitadelMinterInterface extends utils.Interface {
  contractName: 'CitadelMinter';
  functions: {
    'CONTRACT_GOVERNANCE_ROLE()': FunctionFragment;
    'PAUSER_ROLE()': FunctionFragment;
    'POLICY_OPERATIONS_ROLE()': FunctionFragment;
    'UNPAUSER_ROLE()': FunctionFragment;
    '__GlobalAccessControlManaged_init(address)': FunctionFragment;
    'citadelToken()': FunctionFragment;
    'fundingBps()': FunctionFragment;
    'fundingPoolWeights(address)': FunctionFragment;
    'gac()': FunctionFragment;
    'getFundingPoolWeights()': FunctionFragment;
    'initialize(address,address,address,address,address)': FunctionFragment;
    'initializeLastMintTimestamp()': FunctionFragment;
    'lastMintTimestamp()': FunctionFragment;
    'lockingBps()': FunctionFragment;
    'mintAndDistribute()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'setCitadelDistributionSplit(uint256,uint256,uint256)': FunctionFragment;
    'setFundingPoolWeight(address,uint256)': FunctionFragment;
    'stakingBps()': FunctionFragment;
    'supplySchedule()': FunctionFragment;
    'totalFundingPoolWeight()': FunctionFragment;
    'unpause()': FunctionFragment;
    'xCitadel()': FunctionFragment;
    'xCitadelLocker()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'CONTRACT_GOVERNANCE_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PAUSER_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'POLICY_OPERATIONS_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'UNPAUSER_ROLE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: '__GlobalAccessControlManaged_init',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'citadelToken',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'fundingBps',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'fundingPoolWeights',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'gac', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getFundingPoolWeights',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'initializeLastMintTimestamp',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastMintTimestamp',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lockingBps',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'mintAndDistribute',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setCitadelDistributionSplit',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setFundingPoolWeight',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'stakingBps',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'supplySchedule',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalFundingPoolWeight',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'xCitadel', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'xCitadelLocker',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'CONTRACT_GOVERNANCE_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PAUSER_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'POLICY_OPERATIONS_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'UNPAUSER_ROLE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: '__GlobalAccessControlManaged_init',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'citadelToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'fundingBps', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'fundingPoolWeights',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'gac', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getFundingPoolWeights',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initializeLastMintTimestamp',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastMintTimestamp',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lockingBps', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'mintAndDistribute',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setCitadelDistributionSplit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFundingPoolWeight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'stakingBps', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'supplySchedule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalFundingPoolWeight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xCitadel', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'xCitadelLocker',
    data: BytesLike,
  ): Result;

  events: {
    'CitadelDistribution(uint256,uint256,uint256)': EventFragment;
    'CitadelDistributionSplitSet(uint256,uint256,uint256)': EventFragment;
    'CitadelDistributionToFunding(uint256,uint256,uint256)': EventFragment;
    'CitadelDistributionToFundingPool(uint256,uint256,address,uint256)': EventFragment;
    'CitadelDistributionToLocking(uint256,uint256,uint256,uint256)': EventFragment;
    'CitadelDistributionToStaking(uint256,uint256,uint256)': EventFragment;
    'FundingPoolWeightSet(address,uint256,uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CitadelDistribution'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'CitadelDistributionSplitSet',
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'CitadelDistributionToFunding',
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'CitadelDistributionToFundingPool',
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'CitadelDistributionToLocking',
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'CitadelDistributionToStaking',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundingPoolWeightSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export type CitadelDistributionEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    fundingAmount: BigNumber;
    stakingAmount: BigNumber;
    lockingAmount: BigNumber;
  }
>;

export type CitadelDistributionEventFilter =
  TypedEventFilter<CitadelDistributionEvent>;

export type CitadelDistributionSplitSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { fundingBps: BigNumber; stakingBps: BigNumber; lockingBps: BigNumber }
>;

export type CitadelDistributionSplitSetEventFilter =
  TypedEventFilter<CitadelDistributionSplitSetEvent>;

export type CitadelDistributionToFundingEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { startTime: BigNumber; endTime: BigNumber; citadelAmount: BigNumber }
>;

export type CitadelDistributionToFundingEventFilter =
  TypedEventFilter<CitadelDistributionToFundingEvent>;

export type CitadelDistributionToFundingPoolEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  {
    startTime: BigNumber;
    endTime: BigNumber;
    pool: string;
    citadelAmount: BigNumber;
  }
>;

export type CitadelDistributionToFundingPoolEventFilter =
  TypedEventFilter<CitadelDistributionToFundingPoolEvent>;

export type CitadelDistributionToLockingEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    startTime: BigNumber;
    endTime: BigNumber;
    citadelAmount: BigNumber;
    xCitadelAmount: BigNumber;
  }
>;

export type CitadelDistributionToLockingEventFilter =
  TypedEventFilter<CitadelDistributionToLockingEvent>;

export type CitadelDistributionToStakingEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { startTime: BigNumber; endTime: BigNumber; citadelAmount: BigNumber }
>;

export type CitadelDistributionToStakingEventFilter =
  TypedEventFilter<CitadelDistributionToStakingEvent>;

export type FundingPoolWeightSetEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { pool: string; weight: BigNumber; totalFundingPoolWeight: BigNumber }
>;

export type FundingPoolWeightSetEventFilter =
  TypedEventFilter<FundingPoolWeightSetEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface CitadelMinter extends BaseContract {
  contractName: 'CitadelMinter';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CitadelMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRACT_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    POLICY_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __GlobalAccessControlManaged_init(
      _globalAccessControl: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    citadelToken(overrides?: CallOverrides): Promise<[string]>;

    fundingBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingPoolWeights(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    gac(overrides?: CallOverrides): Promise<[string]>;

    getFundingPoolWeights(
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & { pools: string[]; weights: BigNumber[] }
    >;

    initialize(
      _gac: string,
      _citadelToken: string,
      _xCitadel: string,
      _xCitadelLocker: string,
      _supplySchedule: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initializeLastMintTimestamp(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lastMintTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockingBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintAndDistribute(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setCitadelDistributionSplit(
      _fundingBps: BigNumberish,
      _stakingBps: BigNumberish,
      _lockingBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFundingPoolWeight(
      _pool: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stakingBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    supplySchedule(overrides?: CallOverrides): Promise<[string]>;

    totalFundingPoolWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    xCitadel(overrides?: CallOverrides): Promise<[string]>;

    xCitadelLocker(overrides?: CallOverrides): Promise<[string]>;
  };

  CONTRACT_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  POLICY_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<string>;

  UNPAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  __GlobalAccessControlManaged_init(
    _globalAccessControl: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  citadelToken(overrides?: CallOverrides): Promise<string>;

  fundingBps(overrides?: CallOverrides): Promise<BigNumber>;

  fundingPoolWeights(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  gac(overrides?: CallOverrides): Promise<string>;

  getFundingPoolWeights(
    overrides?: CallOverrides,
  ): Promise<
    [string[], BigNumber[]] & { pools: string[]; weights: BigNumber[] }
  >;

  initialize(
    _gac: string,
    _citadelToken: string,
    _xCitadel: string,
    _xCitadelLocker: string,
    _supplySchedule: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initializeLastMintTimestamp(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  lastMintTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  lockingBps(overrides?: CallOverrides): Promise<BigNumber>;

  mintAndDistribute(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setCitadelDistributionSplit(
    _fundingBps: BigNumberish,
    _stakingBps: BigNumberish,
    _lockingBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFundingPoolWeight(
    _pool: string,
    _weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stakingBps(overrides?: CallOverrides): Promise<BigNumber>;

  supplySchedule(overrides?: CallOverrides): Promise<string>;

  totalFundingPoolWeight(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  xCitadel(overrides?: CallOverrides): Promise<string>;

  xCitadelLocker(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CONTRACT_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    POLICY_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<string>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    __GlobalAccessControlManaged_init(
      _globalAccessControl: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    citadelToken(overrides?: CallOverrides): Promise<string>;

    fundingBps(overrides?: CallOverrides): Promise<BigNumber>;

    fundingPoolWeights(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    gac(overrides?: CallOverrides): Promise<string>;

    getFundingPoolWeights(
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & { pools: string[]; weights: BigNumber[] }
    >;

    initialize(
      _gac: string,
      _citadelToken: string,
      _xCitadel: string,
      _xCitadelLocker: string,
      _supplySchedule: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    initializeLastMintTimestamp(overrides?: CallOverrides): Promise<void>;

    lastMintTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lockingBps(overrides?: CallOverrides): Promise<BigNumber>;

    mintAndDistribute(overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setCitadelDistributionSplit(
      _fundingBps: BigNumberish,
      _stakingBps: BigNumberish,
      _lockingBps: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFundingPoolWeight(
      _pool: string,
      _weight: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakingBps(overrides?: CallOverrides): Promise<BigNumber>;

    supplySchedule(overrides?: CallOverrides): Promise<string>;

    totalFundingPoolWeight(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    xCitadel(overrides?: CallOverrides): Promise<string>;

    xCitadelLocker(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'CitadelDistribution(uint256,uint256,uint256)'(
      fundingAmount?: null,
      stakingAmount?: null,
      lockingAmount?: null,
    ): CitadelDistributionEventFilter;
    CitadelDistribution(
      fundingAmount?: null,
      stakingAmount?: null,
      lockingAmount?: null,
    ): CitadelDistributionEventFilter;

    'CitadelDistributionSplitSet(uint256,uint256,uint256)'(
      fundingBps?: null,
      stakingBps?: null,
      lockingBps?: null,
    ): CitadelDistributionSplitSetEventFilter;
    CitadelDistributionSplitSet(
      fundingBps?: null,
      stakingBps?: null,
      lockingBps?: null,
    ): CitadelDistributionSplitSetEventFilter;

    'CitadelDistributionToFunding(uint256,uint256,uint256)'(
      startTime?: null,
      endTime?: null,
      citadelAmount?: null,
    ): CitadelDistributionToFundingEventFilter;
    CitadelDistributionToFunding(
      startTime?: null,
      endTime?: null,
      citadelAmount?: null,
    ): CitadelDistributionToFundingEventFilter;

    'CitadelDistributionToFundingPool(uint256,uint256,address,uint256)'(
      startTime?: null,
      endTime?: null,
      pool?: null,
      citadelAmount?: null,
    ): CitadelDistributionToFundingPoolEventFilter;
    CitadelDistributionToFundingPool(
      startTime?: null,
      endTime?: null,
      pool?: null,
      citadelAmount?: null,
    ): CitadelDistributionToFundingPoolEventFilter;

    'CitadelDistributionToLocking(uint256,uint256,uint256,uint256)'(
      startTime?: null,
      endTime?: null,
      citadelAmount?: null,
      xCitadelAmount?: null,
    ): CitadelDistributionToLockingEventFilter;
    CitadelDistributionToLocking(
      startTime?: null,
      endTime?: null,
      citadelAmount?: null,
      xCitadelAmount?: null,
    ): CitadelDistributionToLockingEventFilter;

    'CitadelDistributionToStaking(uint256,uint256,uint256)'(
      startTime?: null,
      endTime?: null,
      citadelAmount?: null,
    ): CitadelDistributionToStakingEventFilter;
    CitadelDistributionToStaking(
      startTime?: null,
      endTime?: null,
      citadelAmount?: null,
    ): CitadelDistributionToStakingEventFilter;

    'FundingPoolWeightSet(address,uint256,uint256)'(
      pool?: null,
      weight?: null,
      totalFundingPoolWeight?: null,
    ): FundingPoolWeightSetEventFilter;
    FundingPoolWeightSet(
      pool?: null,
      weight?: null,
      totalFundingPoolWeight?: null,
    ): FundingPoolWeightSetEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    CONTRACT_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    POLICY_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __GlobalAccessControlManaged_init(
      _globalAccessControl: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    citadelToken(overrides?: CallOverrides): Promise<BigNumber>;

    fundingBps(overrides?: CallOverrides): Promise<BigNumber>;

    fundingPoolWeights(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    gac(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingPoolWeights(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _gac: string,
      _citadelToken: string,
      _xCitadel: string,
      _xCitadelLocker: string,
      _supplySchedule: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initializeLastMintTimestamp(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    lastMintTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lockingBps(overrides?: CallOverrides): Promise<BigNumber>;

    mintAndDistribute(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setCitadelDistributionSplit(
      _fundingBps: BigNumberish,
      _stakingBps: BigNumberish,
      _lockingBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFundingPoolWeight(
      _pool: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stakingBps(overrides?: CallOverrides): Promise<BigNumber>;

    supplySchedule(overrides?: CallOverrides): Promise<BigNumber>;

    totalFundingPoolWeight(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    xCitadel(overrides?: CallOverrides): Promise<BigNumber>;

    xCitadelLocker(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_GOVERNANCE_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POLICY_OPERATIONS_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __GlobalAccessControlManaged_init(
      _globalAccessControl: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    citadelToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingPoolWeights(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    gac(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFundingPoolWeights(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _gac: string,
      _citadelToken: string,
      _xCitadel: string,
      _xCitadelLocker: string,
      _supplySchedule: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initializeLastMintTimestamp(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lastMintTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockingBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAndDistribute(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCitadelDistributionSplit(
      _fundingBps: BigNumberish,
      _stakingBps: BigNumberish,
      _lockingBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFundingPoolWeight(
      _pool: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stakingBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplySchedule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFundingPoolWeight(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    xCitadel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xCitadelLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
