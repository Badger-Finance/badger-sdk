/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace StakedCitadelLocker {
  export type EarnedDataStruct = { token: string; amount: BigNumberish };

  export type EarnedDataStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type LockedBalanceStruct = {
    amount: BigNumberish;
    boosted: BigNumberish;
    unlockTime: BigNumberish;
  };

  export type LockedBalanceStructOutput = [BigNumber, BigNumber, number] & {
    amount: BigNumber;
    boosted: BigNumber;
    unlockTime: number;
  };
}

export interface StakedCitadelLockerInterface extends utils.Interface {
  contractName: "StakedCitadelLocker";
  functions: {
    "CONTRACT_GOVERNANCE_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "TECH_OPERATIONS_ROLE()": FunctionFragment;
    "TREASURY_GOVERNANCE_ROLE()": FunctionFragment;
    "UNPAUSER_ROLE()": FunctionFragment;
    "__GlobalAccessControlManaged_init(address)": FunctionFragment;
    "addReward(address,address,bool)": FunctionFragment;
    "approveRewardDistributor(address,address,bool)": FunctionFragment;
    "balanceAtEpochOf(uint256,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "boostPayment()": FunctionFragment;
    "boostRate()": FunctionFragment;
    "boostedSupply()": FunctionFragment;
    "checkpointEpoch()": FunctionFragment;
    "claimableRewardForToken(address,address)": FunctionFragment;
    "claimableRewards(address)": FunctionFragment;
    "cumulativeClaimed(address,address)": FunctionFragment;
    "cumulativeDistributed(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "denominator()": FunctionFragment;
    "epochCount()": FunctionFragment;
    "epochs(uint256)": FunctionFragment;
    "findEpochId(uint256)": FunctionFragment;
    "gac()": FunctionFragment;
    "getCumulativeClaimedRewards(address,address)": FunctionFragment;
    "getReward(address,bool)": FunctionFragment;
    "getRewardForDuration(address)": FunctionFragment;
    "getRewardTokens()": FunctionFragment;
    "initialize(address,address,string,string)": FunctionFragment;
    "isShutdown()": FunctionFragment;
    "kickExpiredLocks(address)": FunctionFragment;
    "kickRewardEpochDelay()": FunctionFragment;
    "kickRewardPerEpoch()": FunctionFragment;
    "lastTimeRewardApplicable(address)": FunctionFragment;
    "lock(address,uint256,uint256)": FunctionFragment;
    "lockDuration()": FunctionFragment;
    "lockedBalanceOf(address)": FunctionFragment;
    "lockedBalances(address)": FunctionFragment;
    "lockedSupply()": FunctionFragment;
    "maximumBoostPayment()": FunctionFragment;
    "maximumStake()": FunctionFragment;
    "minimumStake()": FunctionFragment;
    "name()": FunctionFragment;
    "nextBoostRate()": FunctionFragment;
    "nextMaximumBoostPayment()": FunctionFragment;
    "notifyRewardAmount(address,uint256,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingLockAtEpochOf(uint256,address)": FunctionFragment;
    "pendingLockOf(address)": FunctionFragment;
    "processExpiredLocks(bool)": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardData(address)": FunctionFragment;
    "rewardDistributors(address,address)": FunctionFragment;
    "rewardPerToken(address)": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "rewardWeightOf(address)": FunctionFragment;
    "rewards(address,address)": FunctionFragment;
    "rewardsDuration()": FunctionFragment;
    "setBoost(uint256,uint256,address)": FunctionFragment;
    "setKickIncentive(uint256,uint256)": FunctionFragment;
    "setStakeLimits(uint256,uint256)": FunctionFragment;
    "setStakingContract(address)": FunctionFragment;
    "shutdown()": FunctionFragment;
    "stakeOffsetOnLock()": FunctionFragment;
    "stakingProxy()": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAtEpoch(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "userLocks(address,uint256)": FunctionFragment;
    "userRewardPerTokenPaid(address,address)": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawExpiredLocksTo(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CONTRACT_GOVERNANCE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TECH_OPERATIONS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_GOVERNANCE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNPAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__GlobalAccessControlManaged_init",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRewardDistributor",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceAtEpochOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "boostPayment",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "boostRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boostedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRewardForToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeClaimed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeDistributed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "denominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findEpochId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gac", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCumulativeClaimedRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickExpiredLocks",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "kickRewardEpochDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumBoostPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextBoostRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextMaximumBoostPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingLockAtEpochOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingLockOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "processExpiredLocks",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardDistributors",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardWeightOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBoost",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setKickIncentive",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeOffsetOnLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAtEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userLocks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawExpiredLocksTo",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_GOVERNANCE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TECH_OPERATIONS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_GOVERNANCE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNPAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__GlobalAccessControlManaged_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceAtEpochOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boostRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewardForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "denominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gac", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeClaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kickExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kickRewardEpochDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kickRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumBoostPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextBoostRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMaximumBoostPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingLockAtEpochOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingLockOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardWeightOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBoost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKickIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeOffsetOnLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAtEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userLocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExpiredLocksTo",
    data: BytesLike
  ): Result;

  events: {
    "KickReward(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "RewardAdded(address,address,uint256,bytes32,uint256)": EventFragment;
    "RewardPaid(address,address,uint256)": EventFragment;
    "Staked(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawn(address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KickReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type KickRewardEvent = TypedEvent<
  [string, string, BigNumber],
  { _user: string; _kicked: string; _reward: BigNumber }
>;

export type KickRewardEventFilter = TypedEventFilter<KickRewardEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RecoveredEvent = TypedEvent<
  [string, BigNumber],
  { _token: string; _amount: BigNumber }
>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export type RewardAddedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  {
    account: string;
    _token: string;
    _reward: BigNumber;
    _dataTypeHash: string;
    _timestamp: BigNumber;
  }
>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export type RewardPaidEvent = TypedEvent<
  [string, string, BigNumber],
  { _user: string; _rewardsToken: string; _reward: BigNumber }
>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    _user: string;
    _epoch: BigNumber;
    _paidAmount: BigNumber;
    _lockedAmount: BigNumber;
    _boostedAmount: BigNumber;
  }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, boolean],
  { _user: string; _amount: BigNumber; _relocked: boolean }
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface StakedCitadelLocker extends BaseContract {
  contractName: "StakedCitadelLocker";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakedCitadelLockerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRACT_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TECH_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TREASURY_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __GlobalAccessControlManaged_init(
      _globalAccessControl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReward(
      _rewardsToken: string,
      _distributor: string,
      _useBoost: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        locked: BigNumber;
        boosted: BigNumber;
        nextUnlockIndex: number;
      }
    >;

    boostPayment(overrides?: CallOverrides): Promise<[string]>;

    boostRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    boostedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkpointEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableRewardForToken(
      _account: string,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<
      [StakedCitadelLocker.EarnedDataStructOutput] & {
        userReward: StakedCitadelLocker.EarnedDataStructOutput;
      }
    >;

    claimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [StakedCitadelLocker.EarnedDataStructOutput[]] & {
        userRewards: StakedCitadelLocker.EarnedDataStructOutput[];
      }
    >;

    cumulativeClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cumulativeDistributed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    denominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { supply: BigNumber; date: number }>;

    findEpochId(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { epoch: BigNumber }>;

    gac(overrides?: CallOverrides): Promise<[string]>;

    getCumulativeClaimedRewards(
      _account: string,
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getReward(address,bool)"(
      _account: string,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getReward(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      _stakingToken: string,
      _gac: string,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<[boolean]>;

    kickExpiredLocks(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kickRewardEpochDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    kickRewardPerEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _spendRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    lockedBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        StakedCitadelLocker.LockedBalanceStructOutput[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockData: StakedCitadelLocker.LockedBalanceStructOutput[];
      }
    >;

    lockedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    maximumBoostPayment(overrides?: CallOverrides): Promise<[BigNumber]>;

    maximumStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextBoostRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextMaximumBoostPayment(overrides?: CallOverrides): Promise<[BigNumber]>;

    "notifyRewardAmount(address,uint256,bytes32)"(
      _rewardsToken: string,
      _reward: BigNumberish,
      _dataTypeHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "notifyRewardAmount(address,uint256)"(
      _rewardsToken: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingLockAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    pendingLockOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    processExpiredLocks(
      _relock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, number, BigNumber] & {
        useBoost: boolean;
        periodFinish: number;
        rewardRate: BigNumber;
        lastUpdateTime: number;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardWeightOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBoost(
      _max: BigNumberish,
      _rate: BigNumberish,
      _receivingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKickIncentive(
      _rate: BigNumberish,
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakeLimits(
      _minimum: BigNumberish,
      _maximum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingContract(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeOffsetOnLock(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingProxy(overrides?: CallOverrides): Promise<[string]>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    totalSupplyAtEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        amount: BigNumber;
        boosted: BigNumber;
        unlockTime: number;
      }
    >;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawExpiredLocksTo(
      _withdrawTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CONTRACT_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  TECH_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<string>;

  TREASURY_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<string>;

  UNPAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  __GlobalAccessControlManaged_init(
    _globalAccessControl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReward(
    _rewardsToken: string,
    _distributor: string,
    _useBoost: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveRewardDistributor(
    _rewardsToken: string,
    _distributor: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceAtEpochOf(
    _epoch: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  balances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      locked: BigNumber;
      boosted: BigNumber;
      nextUnlockIndex: number;
    }
  >;

  boostPayment(overrides?: CallOverrides): Promise<string>;

  boostRate(overrides?: CallOverrides): Promise<BigNumber>;

  boostedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  checkpointEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableRewardForToken(
    _account: string,
    _rewardToken: string,
    overrides?: CallOverrides
  ): Promise<StakedCitadelLocker.EarnedDataStructOutput>;

  claimableRewards(
    _account: string,
    overrides?: CallOverrides
  ): Promise<StakedCitadelLocker.EarnedDataStructOutput[]>;

  cumulativeClaimed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cumulativeDistributed(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  denominator(overrides?: CallOverrides): Promise<BigNumber>;

  epochCount(overrides?: CallOverrides): Promise<BigNumber>;

  epochs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { supply: BigNumber; date: number }>;

  findEpochId(
    _time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gac(overrides?: CallOverrides): Promise<string>;

  getCumulativeClaimedRewards(
    _account: string,
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getReward(address,bool)"(
    _account: string,
    _stake: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getReward(address)"(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardForDuration(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    _stakingToken: string,
    _gac: string,
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isShutdown(overrides?: CallOverrides): Promise<boolean>;

  kickExpiredLocks(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kickRewardEpochDelay(overrides?: CallOverrides): Promise<BigNumber>;

  kickRewardPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  lastTimeRewardApplicable(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock(
    _account: string,
    _amount: BigNumberish,
    _spendRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  lockedBalanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  lockedBalances(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      StakedCitadelLocker.LockedBalanceStructOutput[]
    ] & {
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: StakedCitadelLocker.LockedBalanceStructOutput[];
    }
  >;

  lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  maximumBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

  maximumStake(overrides?: CallOverrides): Promise<BigNumber>;

  minimumStake(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nextBoostRate(overrides?: CallOverrides): Promise<BigNumber>;

  nextMaximumBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

  "notifyRewardAmount(address,uint256,bytes32)"(
    _rewardsToken: string,
    _reward: BigNumberish,
    _dataTypeHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "notifyRewardAmount(address,uint256)"(
    _rewardsToken: string,
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingLockAtEpochOf(
    _epoch: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingLockOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  processExpiredLocks(
    _relock: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverERC20(
    _tokenAddress: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, number, BigNumber] & {
      useBoost: boolean;
      periodFinish: number;
      rewardRate: BigNumber;
      lastUpdateTime: number;
      rewardPerTokenStored: BigNumber;
    }
  >;

  rewardDistributors(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rewardPerToken(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rewardWeightOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewards(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  setBoost(
    _max: BigNumberish,
    _rate: BigNumberish,
    _receivingAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKickIncentive(
    _rate: BigNumberish,
    _delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakeLimits(
    _minimum: BigNumberish,
    _maximum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingContract(
    _staking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeOffsetOnLock(overrides?: CallOverrides): Promise<BigNumber>;

  stakingProxy(overrides?: CallOverrides): Promise<string>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAtEpoch(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userLocks(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      amount: BigNumber;
      boosted: BigNumber;
      unlockTime: number;
    }
  >;

  userRewardPerTokenPaid(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawExpiredLocksTo(
    _withdrawTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTRACT_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    TECH_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<string>;

    TREASURY_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<string>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    __GlobalAccessControlManaged_init(
      _globalAccessControl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addReward(
      _rewardsToken: string,
      _distributor: string,
      _useBoost: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        locked: BigNumber;
        boosted: BigNumber;
        nextUnlockIndex: number;
      }
    >;

    boostPayment(overrides?: CallOverrides): Promise<string>;

    boostRate(overrides?: CallOverrides): Promise<BigNumber>;

    boostedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointEpoch(overrides?: CallOverrides): Promise<void>;

    claimableRewardForToken(
      _account: string,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<StakedCitadelLocker.EarnedDataStructOutput>;

    claimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<StakedCitadelLocker.EarnedDataStructOutput[]>;

    cumulativeClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeDistributed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    denominator(overrides?: CallOverrides): Promise<BigNumber>;

    epochCount(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { supply: BigNumber; date: number }>;

    findEpochId(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gac(overrides?: CallOverrides): Promise<string>;

    getCumulativeClaimedRewards(
      _account: string,
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReward(address,bool)"(
      _account: string,
      _stake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "getReward(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

    initialize(
      _stakingToken: string,
      _gac: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isShutdown(overrides?: CallOverrides): Promise<boolean>;

    kickExpiredLocks(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    kickRewardEpochDelay(overrides?: CallOverrides): Promise<BigNumber>;

    kickRewardPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _spendRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        StakedCitadelLocker.LockedBalanceStructOutput[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockData: StakedCitadelLocker.LockedBalanceStructOutput[];
      }
    >;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maximumBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

    maximumStake(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nextBoostRate(overrides?: CallOverrides): Promise<BigNumber>;

    nextMaximumBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

    "notifyRewardAmount(address,uint256,bytes32)"(
      _rewardsToken: string,
      _reward: BigNumberish,
      _dataTypeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "notifyRewardAmount(address,uint256)"(
      _rewardsToken: string,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingLockAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingLockOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    processExpiredLocks(
      _relock: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, number, BigNumber] & {
        useBoost: boolean;
        periodFinish: number;
        rewardRate: BigNumber;
        lastUpdateTime: number;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardWeightOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    setBoost(
      _max: BigNumberish,
      _rate: BigNumberish,
      _receivingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setKickIncentive(
      _rate: BigNumberish,
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakeLimits(
      _minimum: BigNumberish,
      _maximum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingContract(
      _staking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shutdown(overrides?: CallOverrides): Promise<void>;

    stakeOffsetOnLock(overrides?: CallOverrides): Promise<BigNumber>;

    stakingProxy(overrides?: CallOverrides): Promise<string>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAtEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        amount: BigNumber;
        boosted: BigNumber;
        unlockTime: number;
      }
    >;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawExpiredLocksTo(
      _withdrawTo: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "KickReward(address,address,uint256)"(
      _user?: string | null,
      _kicked?: string | null,
      _reward?: null
    ): KickRewardEventFilter;
    KickReward(
      _user?: string | null,
      _kicked?: string | null,
      _reward?: null
    ): KickRewardEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Recovered(address,uint256)"(
      _token?: null,
      _amount?: null
    ): RecoveredEventFilter;
    Recovered(_token?: null, _amount?: null): RecoveredEventFilter;

    "RewardAdded(address,address,uint256,bytes32,uint256)"(
      account?: null,
      _token?: string | null,
      _reward?: null,
      _dataTypeHash?: null,
      _timestamp?: null
    ): RewardAddedEventFilter;
    RewardAdded(
      account?: null,
      _token?: string | null,
      _reward?: null,
      _dataTypeHash?: null,
      _timestamp?: null
    ): RewardAddedEventFilter;

    "RewardPaid(address,address,uint256)"(
      _user?: string | null,
      _rewardsToken?: string | null,
      _reward?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      _user?: string | null,
      _rewardsToken?: string | null,
      _reward?: null
    ): RewardPaidEventFilter;

    "Staked(address,uint256,uint256,uint256,uint256)"(
      _user?: string | null,
      _epoch?: BigNumberish | null,
      _paidAmount?: null,
      _lockedAmount?: null,
      _boostedAmount?: null
    ): StakedEventFilter;
    Staked(
      _user?: string | null,
      _epoch?: BigNumberish | null,
      _paidAmount?: null,
      _lockedAmount?: null,
      _boostedAmount?: null
    ): StakedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdrawn(address,uint256,bool)"(
      _user?: string | null,
      _amount?: null,
      _relocked?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      _user?: string | null,
      _amount?: null,
      _relocked?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    CONTRACT_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TECH_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TREASURY_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __GlobalAccessControlManaged_init(
      _globalAccessControl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReward(
      _rewardsToken: string,
      _distributor: string,
      _useBoost: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    boostPayment(overrides?: CallOverrides): Promise<BigNumber>;

    boostRate(overrides?: CallOverrides): Promise<BigNumber>;

    boostedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableRewardForToken(
      _account: string,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeDistributed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    denominator(overrides?: CallOverrides): Promise<BigNumber>;

    epochCount(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    findEpochId(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gac(overrides?: CallOverrides): Promise<BigNumber>;

    getCumulativeClaimedRewards(
      _account: string,
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReward(address,bool)"(
      _account: string,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getReward(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _stakingToken: string,
      _gac: string,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    kickExpiredLocks(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kickRewardEpochDelay(overrides?: CallOverrides): Promise<BigNumber>;

    kickRewardPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _spendRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maximumBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

    maximumStake(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextBoostRate(overrides?: CallOverrides): Promise<BigNumber>;

    nextMaximumBoostPayment(overrides?: CallOverrides): Promise<BigNumber>;

    "notifyRewardAmount(address,uint256,bytes32)"(
      _rewardsToken: string,
      _reward: BigNumberish,
      _dataTypeHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "notifyRewardAmount(address,uint256)"(
      _rewardsToken: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingLockAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingLockOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    processExpiredLocks(
      _relock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardWeightOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    setBoost(
      _max: BigNumberish,
      _rate: BigNumberish,
      _receivingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKickIncentive(
      _rate: BigNumberish,
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakeLimits(
      _minimum: BigNumberish,
      _maximum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingContract(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeOffsetOnLock(overrides?: CallOverrides): Promise<BigNumber>;

    stakingProxy(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAtEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawExpiredLocksTo(
      _withdrawTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_GOVERNANCE_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TECH_OPERATIONS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TREASURY_GOVERNANCE_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __GlobalAccessControlManaged_init(
      _globalAccessControl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReward(
      _rewardsToken: string,
      _distributor: string,
      _useBoost: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boostPayment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkpointEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableRewardForToken(
      _account: string,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeDistributed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    denominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findEpochId(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gac(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCumulativeClaimedRewards(
      _account: string,
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReward(address,bool)"(
      _account: string,
      _stake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getReward(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _stakingToken: string,
      _gac: string,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kickExpiredLocks(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kickRewardEpochDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kickRewardPerEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      _account: string,
      _amount: BigNumberish,
      _spendRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumBoostPayment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maximumStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextBoostRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextMaximumBoostPayment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "notifyRewardAmount(address,uint256,bytes32)"(
      _rewardsToken: string,
      _reward: BigNumberish,
      _dataTypeHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "notifyRewardAmount(address,uint256)"(
      _rewardsToken: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingLockAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingLockOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processExpiredLocks(
      _relock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardWeightOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBoost(
      _max: BigNumberish,
      _rate: BigNumberish,
      _receivingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKickIncentive(
      _rate: BigNumberish,
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakeLimits(
      _minimum: BigNumberish,
      _maximum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingContract(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeOffsetOnLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAtEpoch(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawExpiredLocksTo(
      _withdrawTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
