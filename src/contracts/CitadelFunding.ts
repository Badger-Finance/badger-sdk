/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Funding {
  export type FundingParamsStruct = {
    discount: BigNumberish;
    minDiscount: BigNumberish;
    maxDiscount: BigNumberish;
    discountManager: string;
    assetCumulativeFunded: BigNumberish;
    assetCap: BigNumberish;
  };

  export type FundingParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    discount: BigNumber;
    minDiscount: BigNumber;
    maxDiscount: BigNumber;
    discountManager: string;
    assetCumulativeFunded: BigNumber;
    assetCap: BigNumber;
  };
}

export interface CitadelFundingInterface extends utils.Interface {
  contractName: "CitadelFunding";
  functions: {
    "CONTRACT_GOVERNANCE_ROLE()": FunctionFragment;
    "KEEPER_ROLE()": FunctionFragment;
    "MAX_BPS()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "POLICY_OPERATIONS_ROLE()": FunctionFragment;
    "TREASURY_OPERATIONS_ROLE()": FunctionFragment;
    "TREASURY_VAULT_ROLE()": FunctionFragment;
    "UNPAUSER_ROLE()": FunctionFragment;
    "__GlobalAccessControlManaged_init(address)": FunctionFragment;
    "asset()": FunctionFragment;
    "assetDecimalsNormalizationValue()": FunctionFragment;
    "citadel()": FunctionFragment;
    "citadelPriceFlag()": FunctionFragment;
    "citadelPriceInAsset()": FunctionFragment;
    "citadelPriceInAssetOracle()": FunctionFragment;
    "claimAssetToTreasury()": FunctionFragment;
    "clearCitadelPriceFlag()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "funding()": FunctionFragment;
    "gac()": FunctionFragment;
    "getAmountOut(uint256)": FunctionFragment;
    "getDiscount()": FunctionFragment;
    "getFundingParams()": FunctionFragment;
    "getRemainingFundable()": FunctionFragment;
    "getStakedCitadelAmountOut(uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address,uint256)": FunctionFragment;
    "maxCitadelPriceInAsset()": FunctionFragment;
    "minCitadelPriceInAsset()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "saleRecipient()": FunctionFragment;
    "setAssetCap(uint256)": FunctionFragment;
    "setCitadelAssetPriceBounds(uint256,uint256)": FunctionFragment;
    "setDiscount(uint256)": FunctionFragment;
    "setDiscountLimits(uint256,uint256)": FunctionFragment;
    "setDiscountManager(address)": FunctionFragment;
    "setSaleRecipient(address)": FunctionFragment;
    "sweep(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateCitadelPriceInAsset(uint256)": FunctionFragment;
    "xCitadel()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CONTRACT_GOVERNANCE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_BPS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLICY_OPERATIONS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_OPERATIONS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_VAULT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNPAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__GlobalAccessControlManaged_init",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetDecimalsNormalizationValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "citadel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "citadelPriceFlag",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "citadelPriceInAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "citadelPriceInAssetOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAssetToTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clearCitadelPriceFlag",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "funding", values?: undefined): string;
  encodeFunctionData(functionFragment: "gac", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingFundable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedCitadelAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCitadelPriceInAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCitadelPriceInAsset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCitadelAssetPriceBounds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscountLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscountManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleRecipient",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "sweep", values: [string]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCitadelPriceInAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "xCitadel", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_GOVERNANCE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_BPS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLICY_OPERATIONS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_OPERATIONS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_VAULT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNPAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__GlobalAccessControlManaged_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetDecimalsNormalizationValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "citadel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "citadelPriceFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "citadelPriceInAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "citadelPriceInAssetOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAssetToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearCitadelPriceFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "funding", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gac", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingFundable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedCitadelAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxCitadelPriceInAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCitadelPriceInAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCitadelAssetPriceBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiscountLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiscountManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCitadelPriceInAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xCitadel", data: BytesLike): Result;

  events: {
    "AssetCapUpdated(uint256)": EventFragment;
    "CitadelPriceBoundsSet(uint256,uint256)": EventFragment;
    "CitadelPriceFlag(uint256,uint256,uint256)": EventFragment;
    "CitadelPriceInAssetUpdated(uint256)": EventFragment;
    "ClaimToTreasury(address,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "DiscountLimitsSet(uint256,uint256)": EventFragment;
    "DiscountManagerSet(address)": EventFragment;
    "DiscountSet(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "SaleRecipientUpdated(address)": EventFragment;
    "Sweep(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetCapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CitadelPriceBoundsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CitadelPriceFlag"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CitadelPriceInAssetUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimToTreasury"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiscountLimitsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiscountManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiscountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleRecipientUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sweep"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AssetCapUpdatedEvent = TypedEvent<
  [BigNumber],
  { assetCap: BigNumber }
>;

export type AssetCapUpdatedEventFilter = TypedEventFilter<AssetCapUpdatedEvent>;

export type CitadelPriceBoundsSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { minPrice: BigNumber; maxPrice: BigNumber }
>;

export type CitadelPriceBoundsSetEventFilter =
  TypedEventFilter<CitadelPriceBoundsSetEvent>;

export type CitadelPriceFlagEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { price: BigNumber; minPrice: BigNumber; maxPrice: BigNumber }
>;

export type CitadelPriceFlagEventFilter =
  TypedEventFilter<CitadelPriceFlagEvent>;

export type CitadelPriceInAssetUpdatedEvent = TypedEvent<
  [BigNumber],
  { citadelPrice: BigNumber }
>;

export type CitadelPriceInAssetUpdatedEventFilter =
  TypedEventFilter<CitadelPriceInAssetUpdatedEvent>;

export type ClaimToTreasuryEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>;

export type ClaimToTreasuryEventFilter = TypedEventFilter<ClaimToTreasuryEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { buyer: string; assetIn: BigNumber; citadelOutValue: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type DiscountLimitsSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { minDiscount: BigNumber; maxDiscount: BigNumber }
>;

export type DiscountLimitsSetEventFilter =
  TypedEventFilter<DiscountLimitsSetEvent>;

export type DiscountManagerSetEvent = TypedEvent<
  [string],
  { discountManager: string }
>;

export type DiscountManagerSetEventFilter =
  TypedEventFilter<DiscountManagerSetEvent>;

export type DiscountSetEvent = TypedEvent<[BigNumber], { discount: BigNumber }>;

export type DiscountSetEventFilter = TypedEventFilter<DiscountSetEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type SaleRecipientUpdatedEvent = TypedEvent<
  [string],
  { recipient: string }
>;

export type SaleRecipientUpdatedEventFilter =
  TypedEventFilter<SaleRecipientUpdatedEvent>;

export type SweepEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>;

export type SweepEventFilter = TypedEventFilter<SweepEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface CitadelFunding extends BaseContract {
  contractName: "CitadelFunding";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CitadelFundingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRACT_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    POLICY_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TREASURY_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TREASURY_VAULT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __GlobalAccessControlManaged_init(
      _globalAccessControl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    assetDecimalsNormalizationValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    citadel(overrides?: CallOverrides): Promise<[string]>;

    citadelPriceFlag(overrides?: CallOverrides): Promise<[boolean]>;

    citadelPriceInAsset(overrides?: CallOverrides): Promise<[BigNumber]>;

    citadelPriceInAssetOracle(overrides?: CallOverrides): Promise<[string]>;

    claimAssetToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearCitadelPriceFlag(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _assetAmountIn: BigNumberish,
      _minCitadelOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    funding(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        discount: BigNumber;
        minDiscount: BigNumber;
        maxDiscount: BigNumber;
        discountManager: string;
        assetCumulativeFunded: BigNumber;
        assetCap: BigNumber;
      }
    >;

    gac(overrides?: CallOverrides): Promise<[string]>;

    getAmountOut(
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { citadelAmount_: BigNumber }>;

    getDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFundingParams(
      overrides?: CallOverrides
    ): Promise<[Funding.FundingParamsStructOutput]>;

    getRemainingFundable(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { limitLeft_: BigNumber }>;

    getStakedCitadelAmountOut(
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { xCitadelAmount_: BigNumber }>;

    initialize(
      _gac: string,
      _citadel: string,
      _asset: string,
      _xCitadel: string,
      _saleRecipient: string,
      _citadelPriceInAssetOracle: string,
      _assetCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxCitadelPriceInAsset(overrides?: CallOverrides): Promise<[BigNumber]>;

    minCitadelPriceInAsset(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    saleRecipient(overrides?: CallOverrides): Promise<[string]>;

    setAssetCap(
      _assetCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCitadelAssetPriceBounds(
      _minPrice: BigNumberish,
      _maxPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDiscount(
      _discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDiscountLimits(
      _minDiscount: BigNumberish,
      _maxDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDiscountManager(
      _discountManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleRecipient(
      _saleRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweep(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateCitadelPriceInAsset(uint256)"(
      _citadelPriceInAsset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateCitadelPriceInAsset()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xCitadel(overrides?: CallOverrides): Promise<[string]>;
  };

  CONTRACT_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<string>;

  KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  POLICY_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<string>;

  TREASURY_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<string>;

  TREASURY_VAULT_ROLE(overrides?: CallOverrides): Promise<string>;

  UNPAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  __GlobalAccessControlManaged_init(
    _globalAccessControl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  assetDecimalsNormalizationValue(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  citadel(overrides?: CallOverrides): Promise<string>;

  citadelPriceFlag(overrides?: CallOverrides): Promise<boolean>;

  citadelPriceInAsset(overrides?: CallOverrides): Promise<BigNumber>;

  citadelPriceInAssetOracle(overrides?: CallOverrides): Promise<string>;

  claimAssetToTreasury(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearCitadelPriceFlag(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _assetAmountIn: BigNumberish,
    _minCitadelOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  funding(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
      discount: BigNumber;
      minDiscount: BigNumber;
      maxDiscount: BigNumber;
      discountManager: string;
      assetCumulativeFunded: BigNumber;
      assetCap: BigNumber;
    }
  >;

  gac(overrides?: CallOverrides): Promise<string>;

  getAmountOut(
    _assetAmountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  getFundingParams(
    overrides?: CallOverrides
  ): Promise<Funding.FundingParamsStructOutput>;

  getRemainingFundable(overrides?: CallOverrides): Promise<BigNumber>;

  getStakedCitadelAmountOut(
    _assetAmountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _gac: string,
    _citadel: string,
    _asset: string,
    _xCitadel: string,
    _saleRecipient: string,
    _citadelPriceInAssetOracle: string,
    _assetCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxCitadelPriceInAsset(overrides?: CallOverrides): Promise<BigNumber>;

  minCitadelPriceInAsset(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  saleRecipient(overrides?: CallOverrides): Promise<string>;

  setAssetCap(
    _assetCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCitadelAssetPriceBounds(
    _minPrice: BigNumberish,
    _maxPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDiscount(
    _discount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDiscountLimits(
    _minDiscount: BigNumberish,
    _maxDiscount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDiscountManager(
    _discountManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleRecipient(
    _saleRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweep(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateCitadelPriceInAsset(uint256)"(
    _citadelPriceInAsset: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateCitadelPriceInAsset()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xCitadel(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CONTRACT_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<string>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    POLICY_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<string>;

    TREASURY_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<string>;

    TREASURY_VAULT_ROLE(overrides?: CallOverrides): Promise<string>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    __GlobalAccessControlManaged_init(
      _globalAccessControl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    asset(overrides?: CallOverrides): Promise<string>;

    assetDecimalsNormalizationValue(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    citadel(overrides?: CallOverrides): Promise<string>;

    citadelPriceFlag(overrides?: CallOverrides): Promise<boolean>;

    citadelPriceInAsset(overrides?: CallOverrides): Promise<BigNumber>;

    citadelPriceInAssetOracle(overrides?: CallOverrides): Promise<string>;

    claimAssetToTreasury(overrides?: CallOverrides): Promise<void>;

    clearCitadelPriceFlag(overrides?: CallOverrides): Promise<void>;

    deposit(
      _assetAmountIn: BigNumberish,
      _minCitadelOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    funding(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        discount: BigNumber;
        minDiscount: BigNumber;
        maxDiscount: BigNumber;
        discountManager: string;
        assetCumulativeFunded: BigNumber;
        assetCap: BigNumber;
      }
    >;

    gac(overrides?: CallOverrides): Promise<string>;

    getAmountOut(
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingParams(
      overrides?: CallOverrides
    ): Promise<Funding.FundingParamsStructOutput>;

    getRemainingFundable(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedCitadelAmountOut(
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _gac: string,
      _citadel: string,
      _asset: string,
      _xCitadel: string,
      _saleRecipient: string,
      _citadelPriceInAssetOracle: string,
      _assetCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxCitadelPriceInAsset(overrides?: CallOverrides): Promise<BigNumber>;

    minCitadelPriceInAsset(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    saleRecipient(overrides?: CallOverrides): Promise<string>;

    setAssetCap(
      _assetCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCitadelAssetPriceBounds(
      _minPrice: BigNumberish,
      _maxPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDiscount(
      _discount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDiscountLimits(
      _minDiscount: BigNumberish,
      _maxDiscount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDiscountManager(
      _discountManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleRecipient(
      _saleRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sweep(_token: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "updateCitadelPriceInAsset(uint256)"(
      _citadelPriceInAsset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCitadelPriceInAsset()"(overrides?: CallOverrides): Promise<void>;

    xCitadel(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AssetCapUpdated(uint256)"(assetCap?: null): AssetCapUpdatedEventFilter;
    AssetCapUpdated(assetCap?: null): AssetCapUpdatedEventFilter;

    "CitadelPriceBoundsSet(uint256,uint256)"(
      minPrice?: null,
      maxPrice?: null
    ): CitadelPriceBoundsSetEventFilter;
    CitadelPriceBoundsSet(
      minPrice?: null,
      maxPrice?: null
    ): CitadelPriceBoundsSetEventFilter;

    "CitadelPriceFlag(uint256,uint256,uint256)"(
      price?: null,
      minPrice?: null,
      maxPrice?: null
    ): CitadelPriceFlagEventFilter;
    CitadelPriceFlag(
      price?: null,
      minPrice?: null,
      maxPrice?: null
    ): CitadelPriceFlagEventFilter;

    "CitadelPriceInAssetUpdated(uint256)"(
      citadelPrice?: null
    ): CitadelPriceInAssetUpdatedEventFilter;
    CitadelPriceInAssetUpdated(
      citadelPrice?: null
    ): CitadelPriceInAssetUpdatedEventFilter;

    "ClaimToTreasury(address,uint256)"(
      token?: string | null,
      amount?: null
    ): ClaimToTreasuryEventFilter;
    ClaimToTreasury(
      token?: string | null,
      amount?: null
    ): ClaimToTreasuryEventFilter;

    "Deposit(address,uint256,uint256)"(
      buyer?: string | null,
      assetIn?: null,
      citadelOutValue?: null
    ): DepositEventFilter;
    Deposit(
      buyer?: string | null,
      assetIn?: null,
      citadelOutValue?: null
    ): DepositEventFilter;

    "DiscountLimitsSet(uint256,uint256)"(
      minDiscount?: null,
      maxDiscount?: null
    ): DiscountLimitsSetEventFilter;
    DiscountLimitsSet(
      minDiscount?: null,
      maxDiscount?: null
    ): DiscountLimitsSetEventFilter;

    "DiscountManagerSet(address)"(
      discountManager?: null
    ): DiscountManagerSetEventFilter;
    DiscountManagerSet(discountManager?: null): DiscountManagerSetEventFilter;

    "DiscountSet(uint256)"(discount?: null): DiscountSetEventFilter;
    DiscountSet(discount?: null): DiscountSetEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SaleRecipientUpdated(address)"(
      recipient?: string | null
    ): SaleRecipientUpdatedEventFilter;
    SaleRecipientUpdated(
      recipient?: string | null
    ): SaleRecipientUpdatedEventFilter;

    "Sweep(address,uint256)"(
      token?: string | null,
      amount?: null
    ): SweepEventFilter;
    Sweep(token?: string | null, amount?: null): SweepEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    CONTRACT_GOVERNANCE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    POLICY_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TREASURY_OPERATIONS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TREASURY_VAULT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __GlobalAccessControlManaged_init(
      _globalAccessControl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    assetDecimalsNormalizationValue(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    citadel(overrides?: CallOverrides): Promise<BigNumber>;

    citadelPriceFlag(overrides?: CallOverrides): Promise<BigNumber>;

    citadelPriceInAsset(overrides?: CallOverrides): Promise<BigNumber>;

    citadelPriceInAssetOracle(overrides?: CallOverrides): Promise<BigNumber>;

    claimAssetToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearCitadelPriceFlag(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _assetAmountIn: BigNumberish,
      _minCitadelOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    funding(overrides?: CallOverrides): Promise<BigNumber>;

    gac(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOut(
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingParams(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingFundable(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedCitadelAmountOut(
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _gac: string,
      _citadel: string,
      _asset: string,
      _xCitadel: string,
      _saleRecipient: string,
      _citadelPriceInAssetOracle: string,
      _assetCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxCitadelPriceInAsset(overrides?: CallOverrides): Promise<BigNumber>;

    minCitadelPriceInAsset(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    saleRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    setAssetCap(
      _assetCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCitadelAssetPriceBounds(
      _minPrice: BigNumberish,
      _maxPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDiscount(
      _discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDiscountLimits(
      _minDiscount: BigNumberish,
      _maxDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDiscountManager(
      _discountManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleRecipient(
      _saleRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweep(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateCitadelPriceInAsset(uint256)"(
      _citadelPriceInAsset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateCitadelPriceInAsset()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xCitadel(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_GOVERNANCE_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POLICY_OPERATIONS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TREASURY_OPERATIONS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TREASURY_VAULT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __GlobalAccessControlManaged_init(
      _globalAccessControl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetDecimalsNormalizationValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    citadel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    citadelPriceFlag(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    citadelPriceInAsset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    citadelPriceInAssetOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAssetToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearCitadelPriceFlag(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _assetAmountIn: BigNumberish,
      _minCitadelOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    funding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gac(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountOut(
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFundingParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRemainingFundable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedCitadelAmountOut(
      _assetAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _gac: string,
      _citadel: string,
      _asset: string,
      _xCitadel: string,
      _saleRecipient: string,
      _citadelPriceInAssetOracle: string,
      _assetCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxCitadelPriceInAsset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minCitadelPriceInAsset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAssetCap(
      _assetCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCitadelAssetPriceBounds(
      _minPrice: BigNumberish,
      _maxPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDiscount(
      _discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDiscountLimits(
      _minDiscount: BigNumberish,
      _maxDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDiscountManager(
      _discountManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleRecipient(
      _saleRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateCitadelPriceInAsset(uint256)"(
      _citadelPriceInAsset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateCitadelPriceInAsset()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xCitadel(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
