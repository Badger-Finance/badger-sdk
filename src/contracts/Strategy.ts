/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StrategyInterface extends utils.Interface {
  contractName: "Strategy";
  functions: {
    "BADGER_TREE()": FunctionFragment;
    "CVX_VAULT()": FunctionFragment;
    "MAX_FEE()": FunctionFragment;
    "MAX_UINT_256()": FunctionFragment;
    "__BaseStrategy_init(address,address,address,address,address)": FunctionFragment;
    "addressProvider()": FunctionFragment;
    "balanceOf()": FunctionFragment;
    "balanceOfPool()": FunctionFragment;
    "balanceOfWant()": FunctionFragment;
    "baseStrategyVersion()": FunctionFragment;
    "booster()": FunctionFragment;
    "controller()": FunctionFragment;
    "crv()": FunctionFragment;
    "crvCvxCrvPoolIndex()": FunctionFragment;
    "crvCvxCrvSlippageToleranceBps()": FunctionFragment;
    "crvDepositor()": FunctionFragment;
    "crvToken()": FunctionFragment;
    "cvx()": FunctionFragment;
    "cvxCrv()": FunctionFragment;
    "cvxCrvRewardsPool()": FunctionFragment;
    "cvxCrvToken()": FunctionFragment;
    "cvxToken()": FunctionFragment;
    "deposit()": FunctionFragment;
    "getName()": FunctionFragment;
    "getProtectedTokens()": FunctionFragment;
    "getTokenSwapPath(address,address)": FunctionFragment;
    "governance()": FunctionFragment;
    "guardian()": FunctionFragment;
    "harvest()": FunctionFragment;
    "initialize(address,address,address,address,address,uint256[3])": FunctionFragment;
    "isProtectedToken(address)": FunctionFragment;
    "isTendable()": FunctionFragment;
    "keeper()": FunctionFragment;
    "metaPoolFactoryId()": FunctionFragment;
    "patchPaths()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "performanceFeeGovernance()": FunctionFragment;
    "performanceFeeStrategist()": FunctionFragment;
    "registryId()": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setCrvCvxCrvSlippageToleranceBps(uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setGuardian(address)": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "setPerformanceFeeGovernance(uint256)": FunctionFragment;
    "setPerformanceFeeStrategist(uint256)": FunctionFragment;
    "setStrategist(address)": FunctionFragment;
    "setWithdrawalFee(uint256)": FunctionFragment;
    "setWithdrawalMaxDeviationThreshold(uint256)": FunctionFragment;
    "strategist()": FunctionFragment;
    "threeCrv()": FunctionFragment;
    "threeCrvSwap()": FunctionFragment;
    "threeCrvToken()": FunctionFragment;
    "tokenSwapPaths(address,address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "usdc()": FunctionFragment;
    "usdcToken()": FunctionFragment;
    "version()": FunctionFragment;
    "want()": FunctionFragment;
    "wbtc()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "withdrawOther(address)": FunctionFragment;
    "withdrawalFee()": FunctionFragment;
    "withdrawalMaxDeviationThreshold()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BADGER_TREE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CVX_VAULT", values?: undefined): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_UINT_256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__BaseStrategy_init",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfWant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseStrategyVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "booster", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crvCvxCrvPoolIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crvCvxCrvSlippageToleranceBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crvDepositor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crvToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "cvx", values?: undefined): string;
  encodeFunctionData(functionFragment: "cvxCrv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cvxCrvRewardsPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cvxCrvToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cvxToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProtectedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenSwapPath",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      [BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isProtectedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTendable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "metaPoolFactoryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "patchPaths",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceFeeGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceFeeStrategist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrvCvxCrvSlippageToleranceBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setGuardian", values: [string]): string;
  encodeFunctionData(functionFragment: "setKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFeeGovernance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFeeStrategist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalMaxDeviationThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "threeCrv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "threeCrvSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "threeCrvToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSwapPaths",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "want", values?: undefined): string;
  encodeFunctionData(functionFragment: "wbtc", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOther",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalMaxDeviationThreshold",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BADGER_TREE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CVX_VAULT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_UINT_256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__BaseStrategy_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfWant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseStrategyVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "booster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crvCvxCrvPoolIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crvCvxCrvSlippageToleranceBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crvDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crvToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cvx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cvxCrv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cvxCrvRewardsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cvxCrvToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cvxToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProtectedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenSwapPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isProtectedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTendable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "metaPoolFactoryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "patchPaths", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceFeeGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceFeeStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registryId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrvCvxCrvSlippageToleranceBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFeeGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFeeStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalMaxDeviationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "threeCrv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "threeCrvSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "threeCrvToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenSwapPaths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "want", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wbtc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalMaxDeviationThreshold",
    data: BytesLike
  ): Result;

  events: {
    "Harvest(uint256,uint256)": EventFragment;
    "HarvestState(uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "SetController(address)": EventFragment;
    "SetGovernance(address)": EventFragment;
    "SetPerformanceFeeGovernance(uint256)": EventFragment;
    "SetPerformanceFeeStrategist(uint256)": EventFragment;
    "SetStrategist(address)": EventFragment;
    "SetWithdrawalFee(uint256)": EventFragment;
    "Tend(uint256)": EventFragment;
    "TendState(uint256,uint256,uint256)": EventFragment;
    "TokenSwapPathSet(address,address,address[])": EventFragment;
    "TreeDistribution(address,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(uint256)": EventFragment;
    "WithdrawAll(uint256)": EventFragment;
    "WithdrawOther(address,uint256)": EventFragment;
    "WithdrawState(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGovernance"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetPerformanceFeeGovernance"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetPerformanceFeeStrategist"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStrategist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWithdrawalFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Tend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TendState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSwapPathSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreeDistribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawOther"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawState"): EventFragment;
}

export type HarvestEvent = TypedEvent<
  [BigNumber, BigNumber],
  { harvested: BigNumber; blockNumber: BigNumber }
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export type HarvestStateEvent = TypedEvent<
  [BigNumber, BigNumber],
  { timestamp: BigNumber; blockNumber: BigNumber }
>;

export type HarvestStateEventFilter = TypedEventFilter<HarvestStateEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type SetControllerEvent = TypedEvent<[string], { controller: string }>;

export type SetControllerEventFilter = TypedEventFilter<SetControllerEvent>;

export type SetGovernanceEvent = TypedEvent<[string], { governance: string }>;

export type SetGovernanceEventFilter = TypedEventFilter<SetGovernanceEvent>;

export type SetPerformanceFeeGovernanceEvent = TypedEvent<
  [BigNumber],
  { performanceFeeGovernance: BigNumber }
>;

export type SetPerformanceFeeGovernanceEventFilter =
  TypedEventFilter<SetPerformanceFeeGovernanceEvent>;

export type SetPerformanceFeeStrategistEvent = TypedEvent<
  [BigNumber],
  { performanceFeeStrategist: BigNumber }
>;

export type SetPerformanceFeeStrategistEventFilter =
  TypedEventFilter<SetPerformanceFeeStrategistEvent>;

export type SetStrategistEvent = TypedEvent<[string], { strategist: string }>;

export type SetStrategistEventFilter = TypedEventFilter<SetStrategistEvent>;

export type SetWithdrawalFeeEvent = TypedEvent<
  [BigNumber],
  { withdrawalFee: BigNumber }
>;

export type SetWithdrawalFeeEventFilter =
  TypedEventFilter<SetWithdrawalFeeEvent>;

export type TendEvent = TypedEvent<[BigNumber], { tended: BigNumber }>;

export type TendEventFilter = TypedEventFilter<TendEvent>;

export type TendStateEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { crvTended: BigNumber; cvxTended: BigNumber; cvxCrvHarvested: BigNumber }
>;

export type TendStateEventFilter = TypedEventFilter<TendStateEvent>;

export type TokenSwapPathSetEvent = TypedEvent<
  [string, string, string[]],
  { tokenIn: string; tokenOut: string; path: string[] }
>;

export type TokenSwapPathSetEventFilter =
  TypedEventFilter<TokenSwapPathSetEvent>;

export type TreeDistributionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    token: string;
    amount: BigNumber;
    blockNumber: BigNumber;
    timestamp: BigNumber;
  }
>;

export type TreeDistributionEventFilter =
  TypedEventFilter<TreeDistributionEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export type WithdrawAllEvent = TypedEvent<[BigNumber], { balance: BigNumber }>;

export type WithdrawAllEventFilter = TypedEventFilter<WithdrawAllEvent>;

export type WithdrawOtherEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>;

export type WithdrawOtherEventFilter = TypedEventFilter<WithdrawOtherEvent>;

export type WithdrawStateEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    toWithdraw: BigNumber;
    preWant: BigNumber;
    postWant: BigNumber;
    withdrawn: BigNumber;
  }
>;

export type WithdrawStateEventFilter = TypedEventFilter<WithdrawStateEvent>;

export interface Strategy extends BaseContract {
  contractName: "Strategy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BADGER_TREE(overrides?: CallOverrides): Promise<[string]>;

    CVX_VAULT(overrides?: CallOverrides): Promise<[string]>;

    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_UINT_256(overrides?: CallOverrides): Promise<[BigNumber]>;

    __BaseStrategy_init(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfWant(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseStrategyVersion(overrides?: CallOverrides): Promise<[string]>;

    booster(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    crv(overrides?: CallOverrides): Promise<[string]>;

    crvCvxCrvPoolIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    crvCvxCrvSlippageToleranceBps(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    crvDepositor(overrides?: CallOverrides): Promise<[string]>;

    crvToken(overrides?: CallOverrides): Promise<[string]>;

    cvx(overrides?: CallOverrides): Promise<[string]>;

    cvxCrv(overrides?: CallOverrides): Promise<[string]>;

    cvxCrvRewardsPool(overrides?: CallOverrides): Promise<[string]>;

    cvxCrvToken(overrides?: CallOverrides): Promise<[string]>;

    cvxToken(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getProtectedTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getTokenSwapPath(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      _feeConfig: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isProtectedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTendable(overrides?: CallOverrides): Promise<[boolean]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    metaPoolFactoryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    patchPaths(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    performanceFeeGovernance(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceFeeStrategist(overrides?: CallOverrides): Promise<[BigNumber]>;

    registryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCrvCvxCrvSlippageToleranceBps(
      _sl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceFeeGovernance(
      _performanceFeeGovernance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceFeeStrategist(
      _performanceFeeStrategist: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalMaxDeviationThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    threeCrv(overrides?: CallOverrides): Promise<[string]>;

    threeCrvSwap(overrides?: CallOverrides): Promise<[string]>;

    threeCrvToken(overrides?: CallOverrides): Promise<[string]>;

    tokenSwapPaths(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    usdcToken(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    wbtc(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawOther(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalMaxDeviationThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  BADGER_TREE(overrides?: CallOverrides): Promise<string>;

  CVX_VAULT(overrides?: CallOverrides): Promise<string>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_UINT_256(overrides?: CallOverrides): Promise<BigNumber>;

  __BaseStrategy_init(
    _governance: string,
    _strategist: string,
    _controller: string,
    _keeper: string,
    _guardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressProvider(overrides?: CallOverrides): Promise<string>;

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

  baseStrategyVersion(overrides?: CallOverrides): Promise<string>;

  booster(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  crv(overrides?: CallOverrides): Promise<string>;

  crvCvxCrvPoolIndex(overrides?: CallOverrides): Promise<BigNumber>;

  crvCvxCrvSlippageToleranceBps(overrides?: CallOverrides): Promise<BigNumber>;

  crvDepositor(overrides?: CallOverrides): Promise<string>;

  crvToken(overrides?: CallOverrides): Promise<string>;

  cvx(overrides?: CallOverrides): Promise<string>;

  cvxCrv(overrides?: CallOverrides): Promise<string>;

  cvxCrvRewardsPool(overrides?: CallOverrides): Promise<string>;

  cvxCrvToken(overrides?: CallOverrides): Promise<string>;

  cvxToken(overrides?: CallOverrides): Promise<string>;

  deposit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getName(overrides?: CallOverrides): Promise<string>;

  getProtectedTokens(overrides?: CallOverrides): Promise<string[]>;

  getTokenSwapPath(
    tokenIn: string,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  governance(overrides?: CallOverrides): Promise<string>;

  guardian(overrides?: CallOverrides): Promise<string>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _governance: string,
    _strategist: string,
    _controller: string,
    _keeper: string,
    _guardian: string,
    _feeConfig: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isProtectedToken(token: string, overrides?: CallOverrides): Promise<boolean>;

  isTendable(overrides?: CallOverrides): Promise<boolean>;

  keeper(overrides?: CallOverrides): Promise<string>;

  metaPoolFactoryId(overrides?: CallOverrides): Promise<BigNumber>;

  patchPaths(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  performanceFeeGovernance(overrides?: CallOverrides): Promise<BigNumber>;

  performanceFeeStrategist(overrides?: CallOverrides): Promise<BigNumber>;

  registryId(overrides?: CallOverrides): Promise<BigNumber>;

  setController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCrvCvxCrvSlippageToleranceBps(
    _sl: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGuardian(
    _guardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceFeeGovernance(
    _performanceFeeGovernance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceFeeStrategist(
    _performanceFeeStrategist: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalFee(
    _withdrawalFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalMaxDeviationThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategist(overrides?: CallOverrides): Promise<string>;

  threeCrv(overrides?: CallOverrides): Promise<string>;

  threeCrvSwap(overrides?: CallOverrides): Promise<string>;

  threeCrvToken(overrides?: CallOverrides): Promise<string>;

  tokenSwapPaths(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  usdcToken(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<string>;

  want(overrides?: CallOverrides): Promise<string>;

  wbtc(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawOther(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalMaxDeviationThreshold(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    BADGER_TREE(overrides?: CallOverrides): Promise<string>;

    CVX_VAULT(overrides?: CallOverrides): Promise<string>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT_256(overrides?: CallOverrides): Promise<BigNumber>;

    __BaseStrategy_init(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addressProvider(overrides?: CallOverrides): Promise<string>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    baseStrategyVersion(overrides?: CallOverrides): Promise<string>;

    booster(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    crv(overrides?: CallOverrides): Promise<string>;

    crvCvxCrvPoolIndex(overrides?: CallOverrides): Promise<BigNumber>;

    crvCvxCrvSlippageToleranceBps(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crvDepositor(overrides?: CallOverrides): Promise<string>;

    crvToken(overrides?: CallOverrides): Promise<string>;

    cvx(overrides?: CallOverrides): Promise<string>;

    cvxCrv(overrides?: CallOverrides): Promise<string>;

    cvxCrvRewardsPool(overrides?: CallOverrides): Promise<string>;

    cvxCrvToken(overrides?: CallOverrides): Promise<string>;

    cvxToken(overrides?: CallOverrides): Promise<string>;

    deposit(overrides?: CallOverrides): Promise<void>;

    getName(overrides?: CallOverrides): Promise<string>;

    getProtectedTokens(overrides?: CallOverrides): Promise<string[]>;

    getTokenSwapPath(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    governance(overrides?: CallOverrides): Promise<string>;

    guardian(overrides?: CallOverrides): Promise<string>;

    harvest(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      _feeConfig: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    isProtectedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTendable(overrides?: CallOverrides): Promise<boolean>;

    keeper(overrides?: CallOverrides): Promise<string>;

    metaPoolFactoryId(overrides?: CallOverrides): Promise<BigNumber>;

    patchPaths(overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    performanceFeeGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeStrategist(overrides?: CallOverrides): Promise<BigNumber>;

    registryId(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCrvCvxCrvSlippageToleranceBps(
      _sl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuardian(_guardian: string, overrides?: CallOverrides): Promise<void>;

    setKeeper(_keeper: string, overrides?: CallOverrides): Promise<void>;

    setPerformanceFeeGovernance(
      _performanceFeeGovernance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerformanceFeeStrategist(
      _performanceFeeStrategist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalMaxDeviationThreshold(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strategist(overrides?: CallOverrides): Promise<string>;

    threeCrv(overrides?: CallOverrides): Promise<string>;

    threeCrvSwap(overrides?: CallOverrides): Promise<string>;

    threeCrvToken(overrides?: CallOverrides): Promise<string>;

    tokenSwapPaths(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;

    usdcToken(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<string>;

    want(overrides?: CallOverrides): Promise<string>;

    wbtc(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawOther(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalMaxDeviationThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Harvest(uint256,uint256)"(
      harvested?: null,
      blockNumber?: BigNumberish | null
    ): HarvestEventFilter;
    Harvest(
      harvested?: null,
      blockNumber?: BigNumberish | null
    ): HarvestEventFilter;

    "HarvestState(uint256,uint256)"(
      timestamp?: null,
      blockNumber?: null
    ): HarvestStateEventFilter;
    HarvestState(timestamp?: null, blockNumber?: null): HarvestStateEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SetController(address)"(controller?: null): SetControllerEventFilter;
    SetController(controller?: null): SetControllerEventFilter;

    "SetGovernance(address)"(governance?: null): SetGovernanceEventFilter;
    SetGovernance(governance?: null): SetGovernanceEventFilter;

    "SetPerformanceFeeGovernance(uint256)"(
      performanceFeeGovernance?: null
    ): SetPerformanceFeeGovernanceEventFilter;
    SetPerformanceFeeGovernance(
      performanceFeeGovernance?: null
    ): SetPerformanceFeeGovernanceEventFilter;

    "SetPerformanceFeeStrategist(uint256)"(
      performanceFeeStrategist?: null
    ): SetPerformanceFeeStrategistEventFilter;
    SetPerformanceFeeStrategist(
      performanceFeeStrategist?: null
    ): SetPerformanceFeeStrategistEventFilter;

    "SetStrategist(address)"(strategist?: null): SetStrategistEventFilter;
    SetStrategist(strategist?: null): SetStrategistEventFilter;

    "SetWithdrawalFee(uint256)"(
      withdrawalFee?: null
    ): SetWithdrawalFeeEventFilter;
    SetWithdrawalFee(withdrawalFee?: null): SetWithdrawalFeeEventFilter;

    "Tend(uint256)"(tended?: null): TendEventFilter;
    Tend(tended?: null): TendEventFilter;

    "TendState(uint256,uint256,uint256)"(
      crvTended?: null,
      cvxTended?: null,
      cvxCrvHarvested?: null
    ): TendStateEventFilter;
    TendState(
      crvTended?: null,
      cvxTended?: null,
      cvxCrvHarvested?: null
    ): TendStateEventFilter;

    "TokenSwapPathSet(address,address,address[])"(
      tokenIn?: null,
      tokenOut?: null,
      path?: null
    ): TokenSwapPathSetEventFilter;
    TokenSwapPathSet(
      tokenIn?: null,
      tokenOut?: null,
      path?: null
    ): TokenSwapPathSetEventFilter;

    "TreeDistribution(address,uint256,uint256,uint256)"(
      token?: string | null,
      amount?: null,
      blockNumber?: BigNumberish | null,
      timestamp?: null
    ): TreeDistributionEventFilter;
    TreeDistribution(
      token?: string | null,
      amount?: null,
      blockNumber?: BigNumberish | null,
      timestamp?: null
    ): TreeDistributionEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(uint256)"(amount?: null): WithdrawEventFilter;
    Withdraw(amount?: null): WithdrawEventFilter;

    "WithdrawAll(uint256)"(balance?: null): WithdrawAllEventFilter;
    WithdrawAll(balance?: null): WithdrawAllEventFilter;

    "WithdrawOther(address,uint256)"(
      token?: null,
      amount?: null
    ): WithdrawOtherEventFilter;
    WithdrawOther(token?: null, amount?: null): WithdrawOtherEventFilter;

    "WithdrawState(uint256,uint256,uint256,uint256)"(
      toWithdraw?: null,
      preWant?: null,
      postWant?: null,
      withdrawn?: null
    ): WithdrawStateEventFilter;
    WithdrawState(
      toWithdraw?: null,
      preWant?: null,
      postWant?: null,
      withdrawn?: null
    ): WithdrawStateEventFilter;
  };

  estimateGas: {
    BADGER_TREE(overrides?: CallOverrides): Promise<BigNumber>;

    CVX_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT_256(overrides?: CallOverrides): Promise<BigNumber>;

    __BaseStrategy_init(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    baseStrategyVersion(overrides?: CallOverrides): Promise<BigNumber>;

    booster(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    crv(overrides?: CallOverrides): Promise<BigNumber>;

    crvCvxCrvPoolIndex(overrides?: CallOverrides): Promise<BigNumber>;

    crvCvxCrvSlippageToleranceBps(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crvDepositor(overrides?: CallOverrides): Promise<BigNumber>;

    crvToken(overrides?: CallOverrides): Promise<BigNumber>;

    cvx(overrides?: CallOverrides): Promise<BigNumber>;

    cvxCrv(overrides?: CallOverrides): Promise<BigNumber>;

    cvxCrvRewardsPool(overrides?: CallOverrides): Promise<BigNumber>;

    cvxCrvToken(overrides?: CallOverrides): Promise<BigNumber>;

    cvxToken(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getProtectedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenSwapPath(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      _feeConfig: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isProtectedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTendable(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    metaPoolFactoryId(overrides?: CallOverrides): Promise<BigNumber>;

    patchPaths(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeStrategist(overrides?: CallOverrides): Promise<BigNumber>;

    registryId(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCrvCvxCrvSlippageToleranceBps(
      _sl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceFeeGovernance(
      _performanceFeeGovernance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceFeeStrategist(
      _performanceFeeStrategist: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawalMaxDeviationThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    threeCrv(overrides?: CallOverrides): Promise<BigNumber>;

    threeCrvSwap(overrides?: CallOverrides): Promise<BigNumber>;

    threeCrvToken(overrides?: CallOverrides): Promise<BigNumber>;

    tokenSwapPaths(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    usdcToken(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    wbtc(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawOther(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalMaxDeviationThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BADGER_TREE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CVX_VAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_UINT_256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __BaseStrategy_init(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfWant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseStrategyVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    booster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvCvxCrvPoolIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crvCvxCrvSlippageToleranceBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crvDepositor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cvx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cvxCrv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cvxCrvRewardsPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cvxCrvToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cvxToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtectedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenSwapPath(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _governance: string,
      _strategist: string,
      _controller: string,
      _keeper: string,
      _guardian: string,
      _feeConfig: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isProtectedToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTendable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metaPoolFactoryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    patchPaths(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFeeGovernance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceFeeStrategist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCrvCvxCrvSlippageToleranceBps(
      _sl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceFeeGovernance(
      _performanceFeeGovernance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceFeeStrategist(
      _performanceFeeStrategist: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalMaxDeviationThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    threeCrv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    threeCrvSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    threeCrvToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenSwapPaths(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wbtc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawOther(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalMaxDeviationThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
